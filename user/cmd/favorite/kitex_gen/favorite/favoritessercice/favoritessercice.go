// Code generated by Kitex v0.2.1. DO NOT EDIT.

package favoritessercice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"userser/cmd/favorite/kitex_gen/favorite"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoritesSerciceServiceInfo
}

var favoritesSerciceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoritesSercice"
	handlerType := (*favorite.FavoritesSercice)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddFavorite":    kitex.NewMethodInfo(addFavoriteHandler, newAddFavoriteArgs, newAddFavoriteResult, false),
		"DelFavorite":    kitex.NewMethodInfo(delFavoriteHandler, newDelFavoriteArgs, newDelFavoriteResult, false),
		"RenameFavorite": kitex.NewMethodInfo(renameFavoriteHandler, newRenameFavoriteArgs, newRenameFavoriteResult, false),
		"AddResult":      kitex.NewMethodInfo(addResultHandler, newAddResultArgs, newAddResultResult, false),
		"DelResult":      kitex.NewMethodInfo(delResultHandler, newDelResultArgs, newDelResultResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.2.1",
		Extra:           extra,
	}
	return svcInfo
}

func addFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite.AddFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite.FavoritesSercice).AddFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddFavoriteArgs:
		success, err := handler.(favorite.FavoritesSercice).AddFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newAddFavoriteArgs() interface{} {
	return &AddFavoriteArgs{}
}

func newAddFavoriteResult() interface{} {
	return &AddFavoriteResult{}
}

type AddFavoriteArgs struct {
	Req *favorite.AddFavoriteRequest
}

func (p *AddFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favorite.AddFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddFavoriteArgs_Req_DEFAULT *favorite.AddFavoriteRequest

func (p *AddFavoriteArgs) GetReq() *favorite.AddFavoriteRequest {
	if !p.IsSetReq() {
		return AddFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddFavoriteResult struct {
	Success *favorite.AddFavoriteResponse
}

var AddFavoriteResult_Success_DEFAULT *favorite.AddFavoriteResponse

func (p *AddFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favorite.AddFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddFavoriteResult) GetSuccess() *favorite.AddFavoriteResponse {
	if !p.IsSetSuccess() {
		return AddFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite.AddFavoriteResponse)
}

func (p *AddFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func delFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite.DelFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite.FavoritesSercice).DelFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DelFavoriteArgs:
		success, err := handler.(favorite.FavoritesSercice).DelFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newDelFavoriteArgs() interface{} {
	return &DelFavoriteArgs{}
}

func newDelFavoriteResult() interface{} {
	return &DelFavoriteResult{}
}

type DelFavoriteArgs struct {
	Req *favorite.DelFavoriteRequest
}

func (p *DelFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DelFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DelFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favorite.DelFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelFavoriteArgs_Req_DEFAULT *favorite.DelFavoriteRequest

func (p *DelFavoriteArgs) GetReq() *favorite.DelFavoriteRequest {
	if !p.IsSetReq() {
		return DelFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type DelFavoriteResult struct {
	Success *favorite.DelFavoriteResponse
}

var DelFavoriteResult_Success_DEFAULT *favorite.DelFavoriteResponse

func (p *DelFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DelFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DelFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favorite.DelFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelFavoriteResult) GetSuccess() *favorite.DelFavoriteResponse {
	if !p.IsSetSuccess() {
		return DelFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite.DelFavoriteResponse)
}

func (p *DelFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func renameFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite.RenameFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite.FavoritesSercice).RenameFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RenameFavoriteArgs:
		success, err := handler.(favorite.FavoritesSercice).RenameFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RenameFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newRenameFavoriteArgs() interface{} {
	return &RenameFavoriteArgs{}
}

func newRenameFavoriteResult() interface{} {
	return &RenameFavoriteResult{}
}

type RenameFavoriteArgs struct {
	Req *favorite.RenameFavoriteRequest
}

func (p *RenameFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RenameFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RenameFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favorite.RenameFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RenameFavoriteArgs_Req_DEFAULT *favorite.RenameFavoriteRequest

func (p *RenameFavoriteArgs) GetReq() *favorite.RenameFavoriteRequest {
	if !p.IsSetReq() {
		return RenameFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RenameFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type RenameFavoriteResult struct {
	Success *favorite.RenameFavoriteResponse
}

var RenameFavoriteResult_Success_DEFAULT *favorite.RenameFavoriteResponse

func (p *RenameFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RenameFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RenameFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favorite.RenameFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RenameFavoriteResult) GetSuccess() *favorite.RenameFavoriteResponse {
	if !p.IsSetSuccess() {
		return RenameFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RenameFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite.RenameFavoriteResponse)
}

func (p *RenameFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func addResultHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite.AddResultRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite.FavoritesSercice).AddResult(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddResultArgs:
		success, err := handler.(favorite.FavoritesSercice).AddResult(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddResultResult)
		realResult.Success = success
	}
	return nil
}
func newAddResultArgs() interface{} {
	return &AddResultArgs{}
}

func newAddResultResult() interface{} {
	return &AddResultResult{}
}

type AddResultArgs struct {
	Req *favorite.AddResultRequest
}

func (p *AddResultArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddResultArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddResultArgs) Unmarshal(in []byte) error {
	msg := new(favorite.AddResultRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddResultArgs_Req_DEFAULT *favorite.AddResultRequest

func (p *AddResultArgs) GetReq() *favorite.AddResultRequest {
	if !p.IsSetReq() {
		return AddResultArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddResultArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddResultResult struct {
	Success *favorite.AddResultResponse
}

var AddResultResult_Success_DEFAULT *favorite.AddResultResponse

func (p *AddResultResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddResultResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddResultResult) Unmarshal(in []byte) error {
	msg := new(favorite.AddResultResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddResultResult) GetSuccess() *favorite.AddResultResponse {
	if !p.IsSetSuccess() {
		return AddResultResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite.AddResultResponse)
}

func (p *AddResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func delResultHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite.DelResultRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite.FavoritesSercice).DelResult(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DelResultArgs:
		success, err := handler.(favorite.FavoritesSercice).DelResult(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelResultResult)
		realResult.Success = success
	}
	return nil
}
func newDelResultArgs() interface{} {
	return &DelResultArgs{}
}

func newDelResultResult() interface{} {
	return &DelResultResult{}
}

type DelResultArgs struct {
	Req *favorite.DelResultRequest
}

func (p *DelResultArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DelResultArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DelResultArgs) Unmarshal(in []byte) error {
	msg := new(favorite.DelResultRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelResultArgs_Req_DEFAULT *favorite.DelResultRequest

func (p *DelResultArgs) GetReq() *favorite.DelResultRequest {
	if !p.IsSetReq() {
		return DelResultArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelResultArgs) IsSetReq() bool {
	return p.Req != nil
}

type DelResultResult struct {
	Success *favorite.DelResultResponse
}

var DelResultResult_Success_DEFAULT *favorite.DelResultResponse

func (p *DelResultResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DelResultResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DelResultResult) Unmarshal(in []byte) error {
	msg := new(favorite.DelResultResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelResultResult) GetSuccess() *favorite.DelResultResponse {
	if !p.IsSetSuccess() {
		return DelResultResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite.DelResultResponse)
}

func (p *DelResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddFavorite(ctx context.Context, Req *favorite.AddFavoriteRequest) (r *favorite.AddFavoriteResponse, err error) {
	var _args AddFavoriteArgs
	_args.Req = Req
	var _result AddFavoriteResult
	if err = p.c.Call(ctx, "AddFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelFavorite(ctx context.Context, Req *favorite.DelFavoriteRequest) (r *favorite.DelFavoriteResponse, err error) {
	var _args DelFavoriteArgs
	_args.Req = Req
	var _result DelFavoriteResult
	if err = p.c.Call(ctx, "DelFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RenameFavorite(ctx context.Context, Req *favorite.RenameFavoriteRequest) (r *favorite.RenameFavoriteResponse, err error) {
	var _args RenameFavoriteArgs
	_args.Req = Req
	var _result RenameFavoriteResult
	if err = p.c.Call(ctx, "RenameFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddResult(ctx context.Context, Req *favorite.AddResultRequest) (r *favorite.AddResultResponse, err error) {
	var _args AddResultArgs
	_args.Req = Req
	var _result AddResultResult
	if err = p.c.Call(ctx, "AddResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelResult(ctx context.Context, Req *favorite.DelResultRequest) (r *favorite.DelResultResponse, err error) {
	var _args DelResultArgs
	_args.Req = Req
	var _result DelResultResult
	if err = p.c.Call(ctx, "DelResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
