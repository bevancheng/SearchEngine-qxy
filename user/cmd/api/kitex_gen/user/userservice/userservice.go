// Code generated by Kitex v0.2.1. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"userser/cmd/api/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserSignUp": kitex.NewMethodInfo(userSignUpHandler, newUserSignUpArgs, newUserSignUpResult, false),
		"UserLogIn":  kitex.NewMethodInfo(userLogInHandler, newUserLogInArgs, newUserLogInResult, false),
		"UserLogOut": kitex.NewMethodInfo(userLogOutHandler, newUserLogOutArgs, newUserLogOutResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.2.1",
		Extra:           extra,
	}
	return svcInfo
}

func userSignUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserSignUpRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserSignUp(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserSignUpArgs:
		success, err := handler.(user.UserService).UserSignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserSignUpResult)
		realResult.Success = success
	}
	return nil
}
func newUserSignUpArgs() interface{} {
	return &UserSignUpArgs{}
}

func newUserSignUpResult() interface{} {
	return &UserSignUpResult{}
}

type UserSignUpArgs struct {
	Req *user.UserSignUpRequest
}

func (p *UserSignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserSignUpArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserSignUpArgs) Unmarshal(in []byte) error {
	msg := new(user.UserSignUpRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserSignUpArgs_Req_DEFAULT *user.UserSignUpRequest

func (p *UserSignUpArgs) GetReq() *user.UserSignUpRequest {
	if !p.IsSetReq() {
		return UserSignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserSignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

type UserSignUpResult struct {
	Success *user.UserSignUpResponse
}

var UserSignUpResult_Success_DEFAULT *user.UserSignUpResponse

func (p *UserSignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserSignUpResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserSignUpResult) Unmarshal(in []byte) error {
	msg := new(user.UserSignUpResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserSignUpResult) GetSuccess() *user.UserSignUpResponse {
	if !p.IsSetSuccess() {
		return UserSignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserSignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserSignUpResponse)
}

func (p *UserSignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func userLogInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserLogInRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserLogIn(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserLogInArgs:
		success, err := handler.(user.UserService).UserLogIn(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserLogInResult)
		realResult.Success = success
	}
	return nil
}
func newUserLogInArgs() interface{} {
	return &UserLogInArgs{}
}

func newUserLogInResult() interface{} {
	return &UserLogInResult{}
}

type UserLogInArgs struct {
	Req *user.UserLogInRequest
}

func (p *UserLogInArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserLogInArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserLogInArgs) Unmarshal(in []byte) error {
	msg := new(user.UserLogInRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserLogInArgs_Req_DEFAULT *user.UserLogInRequest

func (p *UserLogInArgs) GetReq() *user.UserLogInRequest {
	if !p.IsSetReq() {
		return UserLogInArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserLogInArgs) IsSetReq() bool {
	return p.Req != nil
}

type UserLogInResult struct {
	Success *user.UserLogInResponse
}

var UserLogInResult_Success_DEFAULT *user.UserLogInResponse

func (p *UserLogInResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserLogInResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserLogInResult) Unmarshal(in []byte) error {
	msg := new(user.UserLogInResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserLogInResult) GetSuccess() *user.UserLogInResponse {
	if !p.IsSetSuccess() {
		return UserLogInResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserLogInResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserLogInResponse)
}

func (p *UserLogInResult) IsSetSuccess() bool {
	return p.Success != nil
}

func userLogOutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserLogOutRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserLogOut(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserLogOutArgs:
		success, err := handler.(user.UserService).UserLogOut(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserLogOutResult)
		realResult.Success = success
	}
	return nil
}
func newUserLogOutArgs() interface{} {
	return &UserLogOutArgs{}
}

func newUserLogOutResult() interface{} {
	return &UserLogOutResult{}
}

type UserLogOutArgs struct {
	Req *user.UserLogOutRequest
}

func (p *UserLogOutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserLogOutArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserLogOutArgs) Unmarshal(in []byte) error {
	msg := new(user.UserLogOutRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserLogOutArgs_Req_DEFAULT *user.UserLogOutRequest

func (p *UserLogOutArgs) GetReq() *user.UserLogOutRequest {
	if !p.IsSetReq() {
		return UserLogOutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserLogOutArgs) IsSetReq() bool {
	return p.Req != nil
}

type UserLogOutResult struct {
	Success *user.UserLogOutResponse
}

var UserLogOutResult_Success_DEFAULT *user.UserLogOutResponse

func (p *UserLogOutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserLogOutResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserLogOutResult) Unmarshal(in []byte) error {
	msg := new(user.UserLogOutResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserLogOutResult) GetSuccess() *user.UserLogOutResponse {
	if !p.IsSetSuccess() {
		return UserLogOutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserLogOutResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserLogOutResponse)
}

func (p *UserLogOutResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserSignUp(ctx context.Context, Req *user.UserSignUpRequest) (r *user.UserSignUpResponse, err error) {
	var _args UserSignUpArgs
	_args.Req = Req
	var _result UserSignUpResult
	if err = p.c.Call(ctx, "UserSignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogIn(ctx context.Context, Req *user.UserLogInRequest) (r *user.UserLogInResponse, err error) {
	var _args UserLogInArgs
	_args.Req = Req
	var _result UserLogInResult
	if err = p.c.Call(ctx, "UserLogIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogOut(ctx context.Context, Req *user.UserLogOutRequest) (r *user.UserLogOutResponse, err error) {
	var _args UserLogOutArgs
	_args.Req = Req
	var _result UserLogOutResult
	if err = p.c.Call(ctx, "UserLogOut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
