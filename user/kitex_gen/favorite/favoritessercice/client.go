// Code generated by Kitex v0.2.1. DO NOT EDIT.

package favoritessercice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"userser/kitex_gen/favorite"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddFavorite(ctx context.Context, Req *favorite.AddFavoriteRequest, callOptions ...callopt.Option) (r *favorite.AddFavoriteResponse, err error)
	DelFavorite(ctx context.Context, Req *favorite.DelFavoriteRequest, callOptions ...callopt.Option) (r *favorite.DelFavoriteResponse, err error)
	RenameFavorite(ctx context.Context, Req *favorite.RenameFavoriteRequest, callOptions ...callopt.Option) (r *favorite.RenameFavoriteResponse, err error)
	AddResult(ctx context.Context, Req *favorite.AddResultRequest, callOptions ...callopt.Option) (r *favorite.AddResultResponse, err error)
	DelResult(ctx context.Context, Req *favorite.DelResultRequest, callOptions ...callopt.Option) (r *favorite.DelResultResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kFavoritesSerciceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFavoritesSerciceClient struct {
	*kClient
}

func (p *kFavoritesSerciceClient) AddFavorite(ctx context.Context, Req *favorite.AddFavoriteRequest, callOptions ...callopt.Option) (r *favorite.AddFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddFavorite(ctx, Req)
}

func (p *kFavoritesSerciceClient) DelFavorite(ctx context.Context, Req *favorite.DelFavoriteRequest, callOptions ...callopt.Option) (r *favorite.DelFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DelFavorite(ctx, Req)
}

func (p *kFavoritesSerciceClient) RenameFavorite(ctx context.Context, Req *favorite.RenameFavoriteRequest, callOptions ...callopt.Option) (r *favorite.RenameFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RenameFavorite(ctx, Req)
}

func (p *kFavoritesSerciceClient) AddResult(ctx context.Context, Req *favorite.AddResultRequest, callOptions ...callopt.Option) (r *favorite.AddResultResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddResult(ctx, Req)
}

func (p *kFavoritesSerciceClient) DelResult(ctx context.Context, Req *favorite.DelResultRequest, callOptions ...callopt.Option) (r *favorite.DelResultResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DelResult(ctx, Req)
}
